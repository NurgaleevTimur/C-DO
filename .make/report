################################################################################
# Файл 'report'
#
#   1) Назначение: 
# 		Автоматическая генерация отчета о сборке проекта.
#  		Отчет содержит информацию о проекте, среде сборки,
#       версии ПО, и лог файл.
#
#   2) Основные Команды:
#       - `$(1)`: Первый аргумент шаблона define.
#       - `2>&1`: Перенаправление stderr > stdout.
#       - `sed`: Утилита используется для форматирования строк в Markdown.
#       - `>`: Перенаправление вывода в файл, с перезаписью.
#       - `>>`: Перенаправление вывода в файл, с добавлением в конец.
#       - `@`:  Подавление вывода команды в терминал.
#
#   3) Структура и Шаблоны:
#       - `define log`: Шаблон для записи информации в лог файл.
#       - `define mdlog`: Шаблон для форматирования и записи информации в файл отчета (.md).
#
#   4) Правила для Разделов Отчета:
#       - `head`: Создает начало отчета (заголовок и общую информацию).
#       - `system`: Информация о системе сборки (ОС, компилятор, флаги).
#       - `build`: Информация о сборке (дата, версия, вывод компиляции).
#       - `message`: Сообщение о проверке кода.
#       - `tail`: Создает конец отчета (подпись разработчика).
#       - `report`: Основное правило для генерации отчета.
#
#   5) Переменная `OBJECTS` содержит список всех объектных файлов (.o) проекта.
################################################################################


define log
@echo $(1) 2>&1 | tee -a $(BLOG)
@$(1) 2>&1 | tee -a $(BLOG)
endef

define mdlog
@$(1) | sed "s/^/\`/" | sed "s/$$/\`\n/" >> $(RFILE)
endef

report: $(OBJECTS) head system build message tail

head:	$(OBJECTS)
	@echo "1. Название программы: $(NAME) $(NDEC)\n" > $(RFILE)

system:
	@echo "2. Наименование и идентификационные признаки инструментальных средств, используемых для проведения статического анализа исходного кода программы:\n" >> $(RFILE)
	@echo "- операционная система под управлением которой выполнялсь процедура статического анализа:\n" >> $(RFILE)
	$(call mdlog, cat /etc/os-release )
	@echo "- инструментальное средство (программа) с помощью которого проводился статический анализ:\n" >> $(RFILE)
	$(call mdlog, $(CC) -v 2>&1 | grep "gcc version" )
	@echo "- настройки (ключи) инструментального средства для проведения статического анализа:\n" >> $(RFILE)
	$(call mdlog, echo '$(LINTFLAGS)' )

build:
	@echo "3. Описание выполнения отчета.\n" >> $(RFILE)
	@echo "- Дата компиляции:\n" >> $(RFILE)
	$(call mdlog, date )
	@echo "- Версия ПО:\n" >> $(RFILE)
	$(call mdlog, echo $(BASE).$(RELEASE).$(GITCOMMIT) )
	@echo "- Вывод компиляции:\n" >> $(RFILE)
	$(call mdlog, cat $(BLOG) )

message:
	@echo "4. Выявленные потенциально-уязвимые конструкции исправлены разработчиком. Конечная версия проверяемой программы не содержит потенциально-уязвимых конструкций.\n" >> $(RFILE)

tail:
	@echo "5. Разработчик:\n" >> $(RFILE)
	@echo "                    _____________ Подпись ________________ Дата\n" >> $(RFILE)